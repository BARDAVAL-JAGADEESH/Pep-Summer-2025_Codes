#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string addStrings(string num1, string num2) {
    int i = num1.length() - 1, j = num2.length() - 1;
    int carry = 0;
    string result = "";

    // Loop until both strings are exhausted and there's no carry left
    while (i >= 0 || j >= 0 || carry) {
        int digit1 = (i >= 0) ? num1[i] - '0' : 0;  // Get the current digit or 0 if out of bounds
        int digit2 = (j >= 0) ? num2[j] - '0' : 0;  // Get the current digit or 0 if out of bounds
        
        int sum = digit1 + digit2 + carry;  // Add digits and carry
        carry = sum / 10;  // Carry for next iteration
        result += to_string(sum % 10);  // Append the current digit to result
        
        i--;  // Move to the next digit in num1
        j--;  // Move to the next digit in num2
    }

    // Reverse the result string as we constructed it backwards
    reverse(result.begin(), result.end());
    
    return result;
}

int main() {
    // Example test cases
    cout << addStrings("11", "123") << endl;  // Output: "134"
    cout << addStrings("456", "77") << endl;  // Output: "533"
    cout << addStrings("0", "0") << endl;    // Output: "0"
    
    return 0;
}









#include <iostream>
#include <string>
using namespace std;

string addStrings(string num1, string num2) {
    int i = num1.size() - 1, j = num2.size() - 1, carry = 0;
    string result = "";

    while (i >= 0 || j >= 0 || carry) {
        int digit1 = (i >= 0) ? num1[i] - '0' : 0;
        int digit2 = (j >= 0) ? num2[j] - '0' : 0;

        int sum = digit1 + digit2 + carry;
        carry = sum / 10;
        result = char(sum % 10 + '0') + result;

        i--;
        j--;
    }

    return result;
}

int main() {
    // Test cases
    cout << addStrings("11", "123") << endl;  // Output: "134"
    cout << addStrings("456", "77") << endl;  // Output: "533"
    cout << addStrings("0", "0") << endl;    // Output: "0"
    
    return 0;
}
